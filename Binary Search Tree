Populating Next Right Pointers in Each Node
==================================
->Simply connect every left node to the right node in the binary tree

class Solution {
public:
    Node* connect(Node* root) {
        if(root==NULL)
            return NULL;
        Node* current=root;
        while(current->left!=NULL){
            Node* temp=current;
            while(current!=NULL){
                current->left->next=current->right;
                current->right->next=current->next==NULL?NULL: current->next->left;
                current=current->next;
            }
            current=temp->left;
        }
        return root;
    }
};

Search in a Binary Search Tree
========================
Use the property of binary search tree
Time Complexity - O(log2^n)
->which is the height

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        while(root != NULL && root->val != val){
            root = val<root->val? root->left:root->right;
        }
        return root;
    }
};

Convert Sorted Array to Binary Search Tree
=================================
->simply using binary search concept and implementing it in the binary search tree 

class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.size()==0) return NULL;
        return bst(nums,0,nums.size()-1);
    }
    TreeNode* bst(vector<int>nums,int left,int right){
        if(left>right)return NULL;
        int midpoint = left+ (right-left)/2;
        TreeNode* node = new TreeNode(nums[midpoint]);
        node->left= bst(nums,left,midpoint-1);
        node->right=bst(nums,midpoint+1,right);
        return node;
    }
};


Construct Binary Search Tree from Preorder Traversal
=========================================
Approach 1: brute force
->Simply build the binary search tree from the starting element in the array
Time Complexity - O(n^2)

Approach 2: Use preorder and inorder
->Given pre order and now create an inorder 
->using preorder and inorder we can simply create an unique binary search tree
Time Complexity - O(nlogn) + O(n)
Space Complexity - O(n)

Approach 3: 
->Now simply use the binary search tree property to construct the binary tree
->before doing so simply make a note of upper bound at every node which we are currently inserting the node into the binary search tree.
->If the value is less than the upper bound the node will move to the left of the current node , if not the value will be moving to the right of the current node 
Time Complexity - O(n)
Space Complexity - O(1)


class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& A) {
        int i=0;
        return build(A, i, INT_MAX);
    }
    TreeNode* build(vector<int>& A, int& i,int bound){
        if(i==A.size() || A[i]>bound) return NULL;
        TreeNode* root = new TreeNode(A[i++]);
        root->left = build(A,i,root->val);
        root->right=build(A,i,bound);
        return root;
    }
};


Given Binary tree is valid BST or not
============================
->At every node note the upper and lower value which is the range of the value that should be in between
Time Complexity - O(n)
Space Complexity - O(1)

class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    public boolean isValidBST(TreeNode root, long minVal, long maxVal){
        if(root == null) return true;
        if(root.val>=maxVal || root.val<=minVal) return false;
        return isValidBST(root.left,minVal,root.val) && isValidBST(root.right,root.val,maxVal);
    }
}


Find LCA of two nodes in BST
=======================
->least common ancestor of two nodes in the binary search tree
->Simply traverse from root node
->if the both elements are less than the search in the left child 
->if the both elements are greater than then search In the right child
->At a point one of the elements will be less than the current node value and other element will be greater than current nodes value which will be its ancestor
->if the node itself is a element then that element itself is the ancestor
Time Complexity - O(height)
Space Complexity - O(1)

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL) return NULL;
        int curr = root->val;
        if(curr<p->val && curr<q->val){
            return lowestCommonAncestor(root->right,p,q);
        }
        if(curr>p->val && curr>q->val){
            return lowestCommonAncestor(root->left,p,q);
        }
        return root;
    }
};


Inorder successor in BST
===================
Approach 1: Brute Force
->store the inorder traversal values
->Check what comes after the given value which will be the answer
Time Complexity - O(n)+logn
Space Complexity - O(n)

Approach 2: 
->Perform an inorder traversal 
->the value which comes after the given input value it is the answer and stop the traversal right over there
Time Complexity - O(n)
Space Complexity - O(1)

Approach 3:
->Take a variable named successor
->If the value is less than the successor then move into the left part
->else move to the right part of the current node 
->Do this until we find just a bit next element of the given input
Time Complexity - O(height)
Space Complexity - O(1)


class Solution{
	public:
		TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p){
			TreeNode* successor = NULL;
			while(root != NULL){
				if(p->val >= root->val){
					root = root->right;
				}else{
					successor=root;
					root=root->left;
				}
			}
			return successor;
		}
}


Floor in a BST
===========
->same like above problem but here we need to find floor of the value that is just a bit less than the given value in the binary search tree
Time Complexity - O(height)
Space Complexity - O(1)


int floorInBST(TreeNode<int> * root, int key)
{
    // Write your code here.
    int floor = -1;
    while(root){
        if(root->val == key){
            floor = root->val;
            return floor;
        }
        if(key>root->val){
            floor=root->val;
            root=root->right;
        }
        else{
            root=root->left;
        }
    }
    return floor;
}


Kth Smallest Element in a BST
=======================
Approach 1:
->do any of the traversal methods in the binary search tree
->store the traversal into a vector 
->sort the vector 
-> the 4th element will be the smallest element in the binary search tree
Time Complexity - O(n)+O(nlogn)
Space Complexity - O(n)

Approach 2:
->Take inorder traversal which will traverse in such a way that it will move in ascending order 
->store the nodes and print out the 4th element from the stored vector
Time Complexity - O(n)
Space Complexity - O(n)

Approach 3:
->use inorder traversal
->but while travelling make a count variable 
->if the count reaches kth value then it will be the answer
Time Complexity - O(n)
Space Complexity - O(1)


node* kthlargest(node* root,int& k)//largest
{
	if(root==NULL)
	return NULL;
	
	node* right=kthlargest(root->right,k);
	if(right!=NULL)
	return right;
	k--;
	
	if(k==0)
	return root;
	
	return kthlargest(root->left,k);
}

node* kthsmallest(node* root,int &k)//smallest
{
	if(root==NULL)
	return NULL;
	
	node* left=kthsmallest(root->left,k);
	if(left!=NULL)
	return left;
	k--;
	if(k==0)
	return root;
	
	return kthsmallest(root->right,k);
}


Find a pair with a given sum in BST
===========================
Approach 1:
->do inorder traversal and store the traversal in a vector
->now the question becomes into two sum problem 
->use two pointer technique and get the answer
Time Complexity - O(n) + O(n)
Space Complexity - O(n)

Approach 2:
->using BST iterator
->push all the lefts into one stack
->push all the rights into on stack
->while traversing pop one element from one stack and pop another element from another stack 
->if the sum is equal to the given element then it is the answer
Time Complexity - O(n)
Space Complexity - O(height) * 2

class BSTIterator {
    stack<TreeNode *> myStack;
    bool reverse = true; 
public:
    BSTIterator(TreeNode *root, bool isReverse) {
        reverse = isReverse; 
        pushAll(root);
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        return !myStack.empty();
    }

    /** @return the next smallest number */
    int next() {
        TreeNode *tmpNode = myStack.top();
        myStack.pop();
        if(!reverse) pushAll(tmpNode->right);
        else pushAll(tmpNode->left);
        return tmpNode->val;
    }

private:
    void pushAll(TreeNode *node) {
        for(;node != NULL; ) {
             myStack.push(node);
             if(reverse == true) {
                 node = node->right; 
             } else {
                 node = node->left; 
             }
        }
    }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false; 
        BSTIterator l(root, false); 
        BSTIterator r(root, true); 
        
        int i = l.next(); 
        int j = r.next(); 
        while(i<j) {
            if(i + j == k) return true; 
            else if(i + j < k) i = l.next(); 
            else j = r.next(); 
        }
        return false; 
    }
};


